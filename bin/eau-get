#!/usr/bin/env node

const program = require("commander");
const chalk = require("chalk");
const i18n = require("../i18n");
const { checkConfig } = require("../utils/common");
const Logger = require("../lib/logger");

const spanner = new Logger();

/**
 * 使用说明
 * usage
 */
program.usage("<config-name> [...config-name-list]");

/**
 * 帮助指令
 * --help
 */
program.on("--help", () => {
  console.log(`
  ${i18n.examples}
  
    ${chalk.gray(i18n.eauGet.help[0])}
    ${chalk.blue(i18n.eauGet.help[1])}
    `);
});

program.action(async () => {
  // 获取参数
  const args = program.args;
  spanner.loading(i18n.eauGet.search);
  // 不存在参数，展示帮助指令
  if (args.length < 1) return program.help();
  // 只有一个参数
  if (args.length < 2) {
    const configObj = checkConfig(args[0]);
    if (configObj) {
      spanner.info(i18n.eauGet.suc[0] + chalk.yellow(" " + args[0] + " ") + i18n.eauGet.suc[1] + chalk.yellow(" " + JSON.stringify(configObj.config[args[0]])));
    } else {
      spanner.fatal(i18n.eauGet.fat[0] + chalk.yellow(" " + args[0] + " ") + i18n.eauGet.fat[1]);
    }
    return spanner.blank();
  }
  await getConfig(args);
  spanner.blank();
});

/**
 * 根据参数打印对应配置项值
 * @param args
 * @returns
 */
function getConfig(args) {
  return new Promise((resolve, reject) => {
    for (let i = 0; i < args.length; i++) {
      const configObj = checkConfig(args[i]);
      if (configObj) {
        spanner.info(chalk.yellow(args[i] + " ") + i18n.eauGet.suc[1] + chalk.yellow(" " + JSON.stringify(configObj.config[args[i]])));
      } else {
        spanner.fatal(chalk.yellow(args[i] + " ") + i18n.eauGet.fat[1]);
      }
    }
    resolve();
  });
}

program.parse(process.argv);
